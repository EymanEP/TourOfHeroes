{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { HEROES } from './mock-heroes';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport class HeroService {\n  constructor(http, messageService) {\n    this.http = http;\n    this.messageService = messageService;\n    this.heroesUrl = 'api/heroes'; // URL to web api\n  }\n  /** GET heroes from the server */\n  getHeroes() {\n    return this.http.get(this.heroesUrl).pipe(catchError(this.handleError('getHeroes', [])));\n  }\n  getHero(id) {\n    // For now, assume that a hero with the specified `id` always exists.\n    // Error handling will be added in the next step of the tutorial.\n    const hero = HEROES.find(h => h.id === id);\n    this.messageService.add(`HeroService: fetched hero id=${id}`);\n    return of(hero);\n  }\n  log(message) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n  static #_ = this.ɵfac = function HeroService_Factory(t) {\n    return new (t || HeroService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HeroService,\n    factory: HeroService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,UAAU,QAAqB,sBAAsB;AAC9D,SAAqBC,EAAE,QAAQ,MAAM;AAGrC,SAASC,MAAM,QAAQ,eAAe;AAEtC,SAASC,UAAU,QAAkB,gBAAgB;;;;AAGrD,OAAM,MAAOC,WAAW;EAItBC,YACUC,IAAgB,EAChBC,cAA8B;IAD9B,SAAI,GAAJD,IAAI;IACJ,mBAAc,GAAdC,cAAc;IAJhB,cAAS,GAAG,YAAY,CAAC,CAAE;EAIS;EAE5C;EACAC,SAAS;IACP,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAS,IAAI,CAACC,SAAS,CAAC,CACzCC,IAAI,CACHR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAS,WAAW,EAAE,EAAE,CAAC,CAAC,CACtD;EACL;EAEAC,OAAO,CAACC,EAAU;IAChB;IACA;IACA,MAAMC,IAAI,GAAGb,MAAM,CAACc,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKA,EAAE,CAAE;IAC3C,IAAI,CAACP,cAAc,CAACW,GAAG,CAAC,gCAAgCJ,EAAE,EAAE,CAAC;IAC7D,OAAOb,EAAE,CAACc,IAAI,CAAC;EACjB;EAEQI,GAAG,CAACC,OAAe;IACzB,IAAI,CAACb,cAAc,CAACW,GAAG,CAAC,gBAAgBE,OAAO,EAAE,CAAC;EACpD;EAAC;qBA1BUhB,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAiB,SAAXjB,WAAW;IAAAkB,YADE;EAAM","names":["HttpClient","of","HEROES","catchError","HeroService","constructor","http","messageService","getHeroes","get","heroesUrl","pipe","handleError","getHero","id","hero","find","h","add","log","message","factory","providedIn"],"sourceRoot":"","sources":["/home/ayen/Repos/TourOfHeroes-1/src/app/hero.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\n\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\nimport { MessageService } from './message.service';\nimport { catchError, map, tap } from 'rxjs/operators';\n\n@Injectable({ providedIn: 'root' })\nexport class HeroService {\n\n  private heroesUrl = 'api/heroes';  // URL to web api\n\n  constructor(\n    private http: HttpClient,\n    private messageService: MessageService) { }\n\n  /** GET heroes from the server */\n  getHeroes(): Observable<Hero[]> {\n    return this.http.get<Hero[]>(this.heroesUrl)\n      .pipe(\n        catchError(this.handleError<Hero[]>('getHeroes', []))\n      );\n  }\n\n  getHero(id: number): Observable<Hero> {\n    // For now, assume that a hero with the specified `id` always exists.\n    // Error handling will be added in the next step of the tutorial.\n    const hero = HEROES.find(h => h.id === id)!;\n    this.messageService.add(`HeroService: fetched hero id=${id}`);\n    return of(hero);\n  }\n\n  private log(message: string) {\n    this.messageService.add(`HeroService: ${message}`)\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}