{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { HEROES } from './mock-heroes';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport class HeroService {\n  constructor(http, messageService) {\n    this.http = http;\n    this.messageService = messageService;\n    this.heroesUrl = 'api/heroes'; // URL to web api\n  }\n  /**\n  * Handle Http operation that failed.\n  * Let the app continue.\n  *\n  * @param operation - name of the operation that failed\n  * @param result - optional value to return as the observable result\n  */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  /** GET hero by id. Will 404 if id not found */\n  getHero(id) {\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.get(url).pipe(tap(_ => this.log(`fetched hero id=${id}`)), catchError(this.handleError(`getHero id=${id}`)));\n  }\n  getHero(id) {\n    // For now, assume that a hero with the specified `id` always exists.\n    // Error handling will be added in the next step of the tutorial.\n    const hero = HEROES.find(h => h.id === id);\n    this.messageService.add(`HeroService: fetched hero id=${id}`);\n    return of(hero);\n  }\n  log(message) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n  static #_ = this.ɵfac = function HeroService_Factory(t) {\n    return new (t || HeroService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HeroService,\n    factory: HeroService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,UAAU,QAAqB,sBAAsB;AAC9D,SAAqBC,EAAE,QAAQ,MAAM;AAGrC,SAASC,MAAM,QAAQ,eAAe;AAEtC,SAASC,UAAU,EAAOC,GAAG,QAAQ,gBAAgB;;;;AAGrD,OAAM,MAAOC,WAAW;EAwBtBC,YACUC,IAAgB,EAChBC,cAA8B;IAD9B,SAAI,GAAJD,IAAI;IACJ,mBAAc,GAAdC,cAAc;IAxBhB,cAAS,GAAG,YAAY,CAAC,CAAE;EAwBS;EAvB5C;;;;;;;EAOQC,WAAW,CAAIC,SAAS,GAAG,WAAW,EAAEC,MAAU;IACxD,OAAQC,KAAU,IAAmB;MAEnC;MACAC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;MAEtB;MACA,IAAI,CAACE,GAAG,CAAC,GAAGJ,SAAS,YAAYE,KAAK,CAACG,OAAO,EAAE,CAAC;MAEjD;MACA,OAAOd,EAAE,CAACU,MAAW,CAAC;IACxB,CAAC;EACH;EAMA;EACFK,OAAO,CAACC,EAAU;IAChB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACC,SAAS,IAAIF,EAAE,EAAE;IACrC,OAAO,IAAI,CAACV,IAAI,CAACa,GAAG,CAAOF,GAAG,CAAC,CAACG,IAAI,CAClCjB,GAAG,CAACkB,CAAC,IAAI,IAAI,CAACR,GAAG,CAAC,mBAAmBG,EAAE,EAAE,CAAC,CAAC,EAC3Cd,UAAU,CAAC,IAAI,CAACM,WAAW,CAAO,cAAcQ,EAAE,EAAE,CAAC,CAAC,CACvD;EACH;EAEED,OAAO,CAACC,EAAU;IAChB;IACA;IACA,MAAMM,IAAI,GAAGrB,MAAM,CAACsB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACR,EAAE,KAAKA,EAAE,CAAE;IAC3C,IAAI,CAACT,cAAc,CAACkB,GAAG,CAAC,gCAAgCT,EAAE,EAAE,CAAC;IAC7D,OAAOhB,EAAE,CAACsB,IAAI,CAAC;EACjB;EAEQT,GAAG,CAACC,OAAe;IACzB,IAAI,CAACP,cAAc,CAACkB,GAAG,CAAC,gBAAgBX,OAAO,EAAE,CAAC;EACpD;EAAC;qBA/CUV,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAsB,SAAXtB,WAAW;IAAAuB,YADE;EAAM","names":["HttpClient","of","HEROES","catchError","tap","HeroService","constructor","http","messageService","handleError","operation","result","error","console","log","message","getHero","id","url","heroesUrl","get","pipe","_","hero","find","h","add","factory","providedIn"],"sourceRoot":"","sources":["/home/ayen/Repos/TourOfHeroes-1/src/app/hero.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\n\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\nimport { MessageService } from './message.service';\nimport { catchError, map, tap } from 'rxjs/operators';\n\n@Injectable({ providedIn: 'root' })\nexport class HeroService {\n\n  private heroesUrl = 'api/heroes';  // URL to web api\n  /**\n * Handle Http operation that failed.\n * Let the app continue.\n *\n * @param operation - name of the operation that failed\n * @param result - optional value to return as the observable result\n */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n\n  constructor(\n    private http: HttpClient,\n    private messageService: MessageService) { }\n\n  /** GET hero by id. Will 404 if id not found */\ngetHero(id: number): Observable<Hero> {\n  const url = `${this.heroesUrl}/${id}`;\n  return this.http.get<Hero>(url).pipe(\n    tap(_ => this.log(`fetched hero id=${id}`)),\n    catchError(this.handleError<Hero>(`getHero id=${id}`))\n  );\n}\n\n  getHero(id: number): Observable<Hero> {\n    // For now, assume that a hero with the specified `id` always exists.\n    // Error handling will be added in the next step of the tutorial.\n    const hero = HEROES.find(h => h.id === id)!;\n    this.messageService.add(`HeroService: fetched hero id=${id}`);\n    return of(hero);\n  }\n\n  private log(message: string) {\n    this.messageService.add(`HeroService: ${message}`)\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}