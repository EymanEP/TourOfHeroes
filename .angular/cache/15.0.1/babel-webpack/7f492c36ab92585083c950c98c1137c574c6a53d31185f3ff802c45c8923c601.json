{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport class HeroService {\n  constructor(http, messageService) {\n    this.http = http;\n    this.messageService = messageService;\n    this.heroesUrl = 'api/heroes'; // URL to web api\n  }\n  /**\n  * Handle Http operation that failed.\n  * Let the app continue.\n  *\n  * @param operation - name of the operation that failed\n  * @param result - optional value to return as the observable result\n  */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  /** GET heroes from the server */\n  getHeroes() {\n    return this.http.get(this.heroesUrl).pipe(tap(_ => this.log('fetched heroes')), catchError(this.handleError('getHeroes', [])));\n  }\n  /** GET hero by id. Will 404 if id not found */\n  getHero(id) {\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.get(url).pipe(tap(_ => this.log(`fetched hero id=${id}`)), catchError(this.handleError(`getHero id=${id}`)));\n  }\n  log(message) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n  /** PUT: update the hero on the server */\n  updateHero(hero) {\n    return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(tap(_ => this.log(`updated hero id=${hero.id}`)), catchError(this.handleError('updateHero')));\n  }\n  static #_ = this.ɵfac = function HeroService_Factory(t) {\n    return new (t || HeroService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HeroService,\n    factory: HeroService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,UAAU,QAAqB,sBAAsB;AAC9D,SAAqBC,EAAE,QAAQ,MAAM;AAKrC,SAASC,UAAU,EAAOC,GAAG,QAAQ,gBAAgB;;;;AAGrD,OAAM,MAAOC,WAAW;EAwBtBC,YACUC,IAAgB,EAChBC,cAA8B;IAD9B,SAAI,GAAJD,IAAI;IACJ,mBAAc,GAAdC,cAAc;IAxBhB,cAAS,GAAG,YAAY,CAAC,CAAE;EAwBS;EAvB5C;;;;;;;EAOQC,WAAW,CAAIC,SAAS,GAAG,WAAW,EAAEC,MAAU;IACxD,OAAQC,KAAU,IAAmB;MAEnC;MACAC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;MAEtB;MACA,IAAI,CAACE,GAAG,CAAC,GAAGJ,SAAS,YAAYE,KAAK,CAACG,OAAO,EAAE,CAAC;MAEjD;MACA,OAAOb,EAAE,CAACS,MAAW,CAAC;IACxB,CAAC;EACH;EAMA;EACAK,SAAS;IACP,OAAO,IAAI,CAACT,IAAI,CAACU,GAAG,CAAS,IAAI,CAACC,SAAS,CAAC,CACzCC,IAAI,CACHf,GAAG,CAACgB,CAAC,IAAI,IAAI,CAACN,GAAG,CAAC,gBAAgB,CAAC,CAAC,EACpCX,UAAU,CAAC,IAAI,CAACM,WAAW,CAAS,WAAW,EAAE,EAAE,CAAC,CAAC,CACtD;EACL;EAEA;EACAY,OAAO,CAACC,EAAU;IAChB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACL,SAAS,IAAII,EAAE,EAAE;IACrC,OAAO,IAAI,CAACf,IAAI,CAACU,GAAG,CAAOM,GAAG,CAAC,CAACJ,IAAI,CAClCf,GAAG,CAACgB,CAAC,IAAI,IAAI,CAACN,GAAG,CAAC,mBAAmBQ,EAAE,EAAE,CAAC,CAAC,EAC3CnB,UAAU,CAAC,IAAI,CAACM,WAAW,CAAO,cAAca,EAAE,EAAE,CAAC,CAAC,CACvD;EACH;EAEQR,GAAG,CAACC,OAAe;IACzB,IAAI,CAACP,cAAc,CAACgB,GAAG,CAAC,gBAAgBT,OAAO,EAAE,CAAC;EACpD;EAEA;EACAU,UAAU,CAACC,IAAU;IACnB,OAAO,IAAI,CAACnB,IAAI,CAACoB,GAAG,CAAC,IAAI,CAACT,SAAS,EAAEQ,IAAI,EAAE,IAAI,CAACE,WAAW,CAAC,CAACT,IAAI,CAC/Df,GAAG,CAACgB,CAAC,IAAI,IAAI,CAACN,GAAG,CAAC,mBAAmBY,IAAI,CAACJ,EAAE,EAAE,CAAC,CAAC,EAChDnB,UAAU,CAAC,IAAI,CAACM,WAAW,CAAM,YAAY,CAAC,CAAC,CAChD;EACH;EAAC;qBAxDUJ,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAwB,SAAXxB,WAAW;IAAAyB,YADE;EAAM","names":["HttpClient","of","catchError","tap","HeroService","constructor","http","messageService","handleError","operation","result","error","console","log","message","getHeroes","get","heroesUrl","pipe","_","getHero","id","url","add","updateHero","hero","put","httpOptions","factory","providedIn"],"sourceRoot":"","sources":["/home/ayen/Repos/TourOfHeroes-1/src/app/hero.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\n\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\nimport { MessageService } from './message.service';\nimport { catchError, map, tap } from 'rxjs/operators';\n\n@Injectable({ providedIn: 'root' })\nexport class HeroService {\n\n  private heroesUrl = 'api/heroes';  // URL to web api\n  /**\n * Handle Http operation that failed.\n * Let the app continue.\n *\n * @param operation - name of the operation that failed\n * @param result - optional value to return as the observable result\n */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n\n  constructor(\n    private http: HttpClient,\n    private messageService: MessageService) { }\n\n  /** GET heroes from the server */\n  getHeroes(): Observable<Hero[]> {\n    return this.http.get<Hero[]>(this.heroesUrl)\n      .pipe(\n        tap(_ => this.log('fetched heroes')),\n        catchError(this.handleError<Hero[]>('getHeroes', []))\n      );\n  }\n\n  /** GET hero by id. Will 404 if id not found */\n  getHero(id: number): Observable<Hero> {\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.get<Hero>(url).pipe(\n      tap(_ => this.log(`fetched hero id=${id}`)),\n      catchError(this.handleError<Hero>(`getHero id=${id}`))\n    );\n  }\n\n  private log(message: string) {\n    this.messageService.add(`HeroService: ${message}`)\n  }\n\n  /** PUT: update the hero on the server */\n  updateHero(hero: Hero): Observable<any> {\n    return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(\n      tap(_ => this.log(`updated hero id=${hero.id}`)),\n      catchError(this.handleError<any>('updateHero'))\n    );\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}